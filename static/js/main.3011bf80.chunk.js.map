{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","color","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","replace","word","index","EmailCheck","match","split","length","defaultProps","Alert","alert","role","lower","charAt","slice","Capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3011bf80.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                </li> */}\r\n              \r\n              </ul>\r\n              \r\n              <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`} style={{color: props.mode === 'dark'?'white':'black'}}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n       </nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title : PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title : 'New Title'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleOnChange = (event)=> {\r\n        // console.log('OnChange was clicked');\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = ()=> {\r\n        // console.log('Uppercase was clicked');\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=> {\r\n        // console.log('Lowercase was clicked');\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n\r\n    const handleEmailClick = ()=> {\r\n        let EmailCheck = text.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9_-]+)/gi) + \" \";\r\n        let newText = EmailCheck;\r\n        newText === null?setText('No emails found'):setText(newText);\r\n        props.showAlert(\"Emails Extracted from Text\",\"success\");\r\n    }\r\n\r\n    const handleCamelClick = ()=> {\r\n        function camelize(str) {\r\n            return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(word, index) {\r\n              return index === 0 ? word.toLowerCase() : word.toUpperCase();\r\n            }).replace(/\\s+/g, '');\r\n            \r\n        }\r\n        let newText = camelize(text);\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Camelcase!\",\"success\");\r\n    }\r\n\r\n\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n    <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}} >\r\n        <h1>{props.heading}</h1>   \r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode === 'dark'?'rgb(46 47 49)':'white',color: props.mode === 'dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n         <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n         <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n         <button className=\"btn btn-primary mx-2\" onClick={handleCamelClick}>Convert to CamelCase</button>\r\n         <button className=\"btn btn-primary mx-2\" onClick={handleEmailClick}>Extract Emails</button>\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2>Your Text Summary</h2> \r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:'Enter Something in the textbox above to Preview it here'}</p>\r\n        </div>    \r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    \r\n    const Capitalize = (word)=> {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n                \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light') // Whether Dark mode or Light mode is enabled\n  const [alert, setAlert] = useState(null)\n  \n  \n  const showAlert = (message,type)=> {\n    setAlert({\n       msg : message,\n       type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(46 47 49)' ;\n      showAlert(\"Dark mode has been enabled\",\"success\");     \n      // '#212529'\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\"); \n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} /> \n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter text to analyse below\" mode={mode}/>\n          {/* </Route>\n        </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}